{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js\";\n// import React from 'react';\n// import axios from 'axios';\n// import Button from '@mui/material/Button';\n\n// class Canvas extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//       canvasImage: null,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   saveImage = () => {\n//     const canvas = this.canvasRef.current;\n//     const imageDataURL = canvas.toDataURL('image/png');\n//     axios.post('/api/saveImage', { imageDataURL })\n//       .then((response) => {\n//         const maskImagePath = response.data.maskImagePath;\n//         this.props.updateMaskImage(maskImagePath);\n//         alert('이미지가 성공적으로 저장되었습니다.');\n//       })\n//       .catch((error) => {\n//         console.error('이미지 저장 실패:', error);\n//       });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <Button variant=\"contained\" onClick={this.clearDrawing}>그림 지우기</Button>\n//           <Button variant=\"contained\" onClick={this.saveImage}>저장</Button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseDown = e => {\n      const {\n        canvas,\n        ctx\n      } = this.state;\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      ctx.beginPath();\n      ctx.moveTo(offsetX, offsetY);\n      this.setState({\n        drawing: true,\n        lastX: offsetX,\n        lastY: offsetY\n      });\n    };\n    this.handleMouseMove = e => {\n      const {\n        drawing,\n        ctx,\n        lastX,\n        lastY\n      } = this.state;\n      if (!drawing) return;\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      ctx.strokeStyle = 'black'; // 그림을 그릴 때는 검은색으로 설정\n      ctx.lineTo(offsetX, offsetY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(offsetX, offsetY);\n      this.setState({\n        lastX: offsetX,\n        lastY: offsetY\n      });\n    };\n    this.handleMouseUp = () => {\n      this.setState({\n        drawing: false\n      });\n      const canvas = this.state.canvas;\n      const imageDataURL = canvas.toDataURL('image/png');\n      // mask 이미지 저장 요청 보내기\n      fetch('/api/saveImage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageDataURL,\n          imageId: this.state.imageId // 이미지 ID를 함께 전송\n        })\n      }).then(response => response.json()).then(data => {\n        console.log(data.maskImagePath);\n        this.props.updateMaskImage(data.maskImagePath); // mask 이미지 경로 업데이트\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    };\n    this.handleImageClick = imageId => {\n      this.setState({\n        imageId\n      });\n    };\n    this.state = {\n      drawing: false,\n      lastX: 0,\n      lastY: 0,\n      canvas: null,\n      ctx: null,\n      imageId: null // 이미지 ID 추가\n    };\n  }\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 10;\n    this.setState({\n      canvas,\n      ctx\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: \"canvas\",\n      width: 400,\n      height: 400,\n      onMouseDown: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      onMouseUp: this.handleMouseUp,\n      onClick: () => this.handleImageClick(this.props.imageId) // 클릭한 이미지의 ID 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Canvas","constructor","props","handleMouseDown","e","canvas","ctx","state","offsetX","offsetY","nativeEvent","beginPath","moveTo","setState","drawing","lastX","lastY","handleMouseMove","strokeStyle","lineTo","stroke","handleMouseUp","imageDataURL","toDataURL","fetch","method","headers","body","JSON","stringify","imageId","then","response","json","data","console","log","maskImagePath","updateMaskImage","catch","error","handleImageClick","componentDidMount","refs","getContext","lineJoin","lineCap","lineWidth","render","ref","width","height","onMouseDown","onMouseMove","onMouseUp","onClick","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js"],"sourcesContent":["// import React from 'react';\n// import axios from 'axios';\n// import Button from '@mui/material/Button';\n\n// class Canvas extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//       canvasImage: null,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   saveImage = () => {\n//     const canvas = this.canvasRef.current;\n//     const imageDataURL = canvas.toDataURL('image/png');\n//     axios.post('/api/saveImage', { imageDataURL })\n//       .then((response) => {\n//         const maskImagePath = response.data.maskImagePath;\n//         this.props.updateMaskImage(maskImagePath);\n//         alert('이미지가 성공적으로 저장되었습니다.');\n//       })\n//       .catch((error) => {\n//         console.error('이미지 저장 실패:', error);\n//       });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <Button variant=\"contained\" onClick={this.clearDrawing}>그림 지우기</Button>\n//           <Button variant=\"contained\" onClick={this.saveImage}>저장</Button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { Component } from 'react';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawing: false,\n      lastX: 0,\n      lastY: 0,\n      canvas: null,\n      ctx: null,\n      imageId: null, // 이미지 ID 추가\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 10;\n    this.setState({ canvas, ctx });\n  }\n\n  handleMouseDown = (e) => {\n    const { canvas, ctx } = this.state;\n    const { offsetX, offsetY } = e.nativeEvent;\n    ctx.beginPath();\n    ctx.moveTo(offsetX, offsetY);\n    this.setState({ drawing: true, lastX: offsetX, lastY: offsetY });\n  };\n\n  handleMouseMove = (e) => {\n    const { drawing, ctx, lastX, lastY } = this.state;\n    if (!drawing) return;\n    const { offsetX, offsetY } = e.nativeEvent;\n    ctx.strokeStyle = 'black'; // 그림을 그릴 때는 검은색으로 설정\n    ctx.lineTo(offsetX, offsetY);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(offsetX, offsetY);\n    this.setState({ lastX: offsetX, lastY: offsetY });\n  };\n\n  handleMouseUp = () => {\n    this.setState({ drawing: false });\n    const canvas = this.state.canvas;\n    const imageDataURL = canvas.toDataURL('image/png');\n    // mask 이미지 저장 요청 보내기\n    fetch('/api/saveImage', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        imageDataURL,\n        imageId: this.state.imageId, // 이미지 ID를 함께 전송\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data.maskImagePath);\n        this.props.updateMaskImage(data.maskImagePath); // mask 이미지 경로 업데이트\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  };\n\n  handleImageClick = (imageId) => {\n    this.setState({ imageId });\n  };\n\n  render() {\n    return (\n      <canvas\n        ref=\"canvas\"\n        width={400}\n        height={400}\n        onMouseDown={this.handleMouseDown}\n        onMouseMove={this.handleMouseMove}\n        onMouseUp={this.handleMouseUp}\n        onClick={() => this.handleImageClick(this.props.imageId)} // 클릭한 이미지의 ID 전달\n      />\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}