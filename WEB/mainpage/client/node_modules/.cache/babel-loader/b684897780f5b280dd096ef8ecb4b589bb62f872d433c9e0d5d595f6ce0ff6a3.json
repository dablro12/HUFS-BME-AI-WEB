{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js\";\n// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React from 'react';\nimport axios from 'axios';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initializeCanvas = () => {\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      canvas.width = this.props.imageWidth;\n      canvas.height = this.props.imageHeight;\n      const backgroundImage = new Image();\n      backgroundImage.src = this.props.backgroundImage;\n      backgroundImage.onload = () => {\n        ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n      };\n      canvas.addEventListener('mousedown', this.handleMouseDown);\n      canvas.addEventListener('mousemove', this.handleMouseMove);\n      canvas.addEventListener('mouseup', this.handleMouseUp);\n      canvas.addEventListener('mouseout', this.handleMouseOut);\n    };\n    this.handleMouseDown = e => {\n      this.startDrawing(e);\n    };\n    this.handleMouseMove = e => {\n      this.draw(e);\n    };\n    this.handleMouseUp = () => {\n      this.stopDrawing();\n    };\n    this.handleMouseOut = () => {\n      this.stopDrawing();\n    };\n    this.startDrawing = e => {\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const {\n        penWidth\n      } = this.state;\n      ctx.lineWidth = penWidth;\n      ctx.lineCap = 'round';\n      ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n      ctx.globalAlpha = 0.7; // 투명도 설정\n      ctx.beginPath();\n      this.setState({\n        isDrawing: true,\n        lastX: e.offsetX,\n        lastY: e.offsetY\n      });\n      ctx.moveTo(e.offsetX, e.offsetY);\n    };\n    this.draw = e => {\n      const {\n        isDrawing,\n        lastX,\n        lastY\n      } = this.state;\n      if (!isDrawing) return;\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.lineTo(e.offsetX, e.offsetY);\n      ctx.stroke();\n      this.setState({\n        lastX: e.offsetX,\n        lastY: e.offsetY\n      });\n\n      // 새로운 선을 시작\n      ctx.beginPath();\n      ctx.moveTo(e.offsetX, e.offsetY);\n    };\n    this.stopDrawing = () => {\n      this.setState({\n        isDrawing: false\n      });\n    };\n    this.clearDrawing = () => {\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.initializeCanvas();\n    };\n    this.setPenWidth = width => {\n      this.setState({\n        penWidth: width\n      });\n    };\n    this.saveImage = () => {\n      const canvas = this.canvasRef.current;\n      const imageDataURL = canvas.toDataURL('image/png');\n      axios.post('/api/saveImage', {\n        imageDataURL\n      }).then(response => {\n        const maskImagePath = response.data.maskImagePath;\n        this.props.updateMaskImage(maskImagePath);\n        alert('이미지가 성공적으로 저장되었습니다.');\n      }).catch(error => {\n        console.error('이미지 저장 실패:', error);\n      });\n    };\n    this.state = {\n      penWidth: 5,\n      isDrawing: false,\n      lastX: 0,\n      lastY: 0,\n      canvasImage: null\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.initializeCanvas();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        style: {\n          border: '1px solid #000'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: this.clearDrawing,\n          children: \"\\uADF8\\uB9BC \\uC9C0\\uC6B0\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: this.saveImage,\n          children: \"\\uC800\\uC7A5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"100\",\n          value: this.state.penWidth,\n          onChange: e => this.setPenWidth(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","axios","Button","jsxDEV","_jsxDEV","Canvas","Component","constructor","props","initializeCanvas","canvas","canvasRef","current","ctx","getContext","width","imageWidth","height","imageHeight","backgroundImage","Image","src","onload","drawImage","addEventListener","handleMouseDown","handleMouseMove","handleMouseUp","handleMouseOut","e","startDrawing","draw","stopDrawing","penWidth","state","lineWidth","lineCap","strokeStyle","globalAlpha","beginPath","setState","isDrawing","lastX","offsetX","lastY","offsetY","moveTo","lineTo","stroke","clearDrawing","clearRect","setPenWidth","saveImage","imageDataURL","toDataURL","post","then","response","maskImagePath","data","updateMaskImage","alert","catch","error","console","canvasImage","createRef","componentDidMount","render","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","variant","onClick","type","min","max","value","onChange","target"],"sources":["/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js"],"sourcesContent":["// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React from 'react';\nimport axios from 'axios';\nimport Button from '@mui/material/Button';\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      penWidth: 5,\n      isDrawing: false,\n      lastX: 0,\n      lastY: 0,\n      canvasImage: null,\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.initializeCanvas();\n  }\n\n  initializeCanvas = () => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = this.props.imageWidth;\n    canvas.height = this.props.imageHeight;\n\n    const backgroundImage = new Image();\n    backgroundImage.src = this.props.backgroundImage;\n    backgroundImage.onload = () => {\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n    };\n\n    canvas.addEventListener('mousedown', this.handleMouseDown);\n    canvas.addEventListener('mousemove', this.handleMouseMove);\n    canvas.addEventListener('mouseup', this.handleMouseUp);\n    canvas.addEventListener('mouseout', this.handleMouseOut);\n  };\n\n  handleMouseDown = (e) => {\n    this.startDrawing(e);\n  };\n\n  handleMouseMove = (e) => {\n    this.draw(e);\n  };\n\n  handleMouseUp = () => {\n    this.stopDrawing();\n  };\n\n  handleMouseOut = () => {\n    this.stopDrawing();\n  };\n\n  startDrawing = (e) => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { penWidth } = this.state;\n\n    ctx.lineWidth = penWidth;\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n    ctx.globalAlpha = 0.7; // 투명도 설정\n    ctx.beginPath();\n\n    this.setState({\n      isDrawing: true,\n      lastX: e.offsetX,\n      lastY: e.offsetY,\n    });\n\n    ctx.moveTo(e.offsetX, e.offsetY);\n  };\n\n  draw = (e) => {\n    const { isDrawing, lastX, lastY } = this.state;\n    if (!isDrawing) return;\n\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.lineTo(e.offsetX, e.offsetY);\n    ctx.stroke();\n\n    this.setState({\n      lastX: e.offsetX,\n      lastY: e.offsetY,\n    });\n\n    // 새로운 선을 시작\n    ctx.beginPath();\n    ctx.moveTo(e.offsetX, e.offsetY);\n  };\n\n  stopDrawing = () => {\n    this.setState({ isDrawing: false });\n  };\n\n  clearDrawing = () => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.initializeCanvas();\n  };\n\n  setPenWidth = (width) => {\n    this.setState({ penWidth: width });\n  };\n\n  saveImage = () => {\n    const canvas = this.canvasRef.current;\n    const imageDataURL = canvas.toDataURL('image/png');\n    axios.post('/api/saveImage', { imageDataURL })\n      .then((response) => {\n        const maskImagePath = response.data.maskImagePath;\n        this.props.updateMaskImage(maskImagePath);\n        alert('이미지가 성공적으로 저장되었습니다.');\n      })\n      .catch((error) => {\n        console.error('이미지 저장 실패:', error);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref={this.canvasRef}\n          style={{ border: '1px solid #000' }}\n        ></canvas>\n        <div style={{ marginTop: '10px' }}>\n          <Button variant=\"contained\" onClick={this.clearDrawing}>그림 지우기</Button>\n          <Button variant=\"contained\" onClick={this.saveImage}>저장</Button>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"100\"\n            value={this.state.penWidth}\n            onChange={(e) => this.setPenWidth(e.target.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}