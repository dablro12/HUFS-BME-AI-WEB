{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/App.js\";\n// import './App.css';\n// import Customer from './components/Customer';\n// import DataAdd from './components/DataAdd';\n\n// import TableRow from '@mui/material/TableRow';\n// import TableCell from '@mui/material/TableCell';\n// import Table from '@mui/material/Table';\n// import TableHead from '@mui/material/TableHead';\n// import TableBody from '@mui/material/TableBody';\n// import CircularProgress from '@mui/material/CircularProgress'; //로딩 중 일 때 동그란 원이 나타나느 라이브러리\n// import Paper from '@mui/material/Paper';\n// import React, { Component } from 'react';\n\n// //App Bar 구현 라이브러리들\n// import { styled, alpha } from '@mui/material/styles';\n// import AppBar from '@mui/material/AppBar';\n// import Box from '@mui/material/Box';\n// import Toolbar from '@mui/material/Toolbar';\n// import IconButton from '@mui/material/IconButton';\n// import Typography from '@mui/material/Typography';\n// import InputBase from '@mui/material/InputBase';\n// import MenuIcon from '@mui/icons-material/Menu';\n// import SearchIcon from '@mui/icons-material/Search';\n\n// const Search = styled('div')(({ theme }) => ({\n//   position: 'relative',\n//   borderRadius: theme.shape.borderRadius,\n//   backgroundColor: alpha(theme.palette.common.white, 0.15),\n//   '&:hover': {\n//     backgroundColor: alpha(theme.palette.common.white, 0.25),\n//   },\n//   marginLeft: 0,\n//   width: '100%',\n//   [theme.breakpoints.up('sm')]: {\n//     marginLeft: theme.spacing(1),\n//     width: 'auto',\n//   },\n// }));\n\n// const SearchIconWrapper = styled('div')(({ theme }) => ({\n//   padding: theme.spacing(0, 2),\n//   height: '100%',\n//   position: 'absolute',\n//   pointerEvents: 'none',\n//   display: 'flex',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n// }));\n\n// const StyledInputBase = styled(InputBase)(({ theme }) => ({\n//   color: 'inherit',\n//   width: '100%',\n//   '& .MuiInputBase-input': {\n//     padding: theme.spacing(1, 1, 1, 0),\n//     // vertical padding + font size from searchIcon\n//     paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n//     transition: theme.transitions.create('width'),\n//     [theme.breakpoints.up('sm')]: {\n//       width: '12ch',\n//       '&:focus': {\n//         width: '20ch',\n//       },\n//     },\n//   },\n// }));\n\n// class App extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       imageData: '',\n//       completed: 0,  //로딩될때 동그란 원이 로딩중임을 나타낼때 사용하기 위한 변수\n//       searchKeyword: ''\n//     } \n//   }\n\n//   stateRefresh = () => {\n//     this.setState({\n//       imageData: '',\n//       completed: 0,\n//       searchKeyword: ''\n//     });\n//     this.callApi()\n//       .then(res => this.setState({ imageData: res }))\n//       .catch(err => console.log(err));\n//   }\n\n//   componentDidMount() { //서버 api에서 data를 받아오는 함수\n//     this.timer = setInterval(this.progress, 800); //1000이 1초 -> 20은 0.02초\n//     this.callApi()\n//       .then(res => this.setState({ imageData: res }))\n//       .catch(err => console.log(err));\n//   }\n\n//   callApi = async () => {\n//     const response = await fetch('/api/main'); //주소에서 데이터 받아옴\n//     const body = await response.json(); //받아온 데이터를 json형태로 body에 저정함\n//     return body;\n//   }\n\n//   progress = () => { //로딩하는 원에 대한 함수\n//     const { completed } = this.state;\n//     this.setState({ completed: completed >= 100 ? 0 : completed + 10 });\n//   }\n\n//   handleValueChange = (e) => {\n//     let nextState = {};\n//     nextState[e.target.name] = e.target.value;\n//     this.setState(nextState);\n//   }\n\n//   render() {\n//     const filteredComponents = (data) => {\n//       data = data.filter((c) => {\n//         return c.name.indexOf(this.state.searchKeyword) > -1;\n//       });\n//       return data.map((c) => {\n//         return <Customer stateRefresh={this.stateRefresh} key = {c.id} id = {c.id} image={c.image} inpainted={c.inpainted} name={c.name} explanation={c.explanation} />\n//       });\n//     }\n//     const cellList = [\"Number\", \"Original Image\", \"Inpainted Image\", \"Name\", \"Explanation\", \"Setting\"];\n//     return (\n//       <div style={{ marginLeft: 10, marginRight: 10 }}>\n//         <Box sx={{ flexGrow: 1 }}>\n//           <AppBar position=\"static\" sx={{ minWidth: '1080px' }}>\n//             <Toolbar>\n//               <IconButton\n//                 size=\"large\"\n//                 edge=\"start\"\n//                 color=\"inherit\"\n//                 aria-label=\"open drawer\"\n//                 sx={{ mr: 2 }}\n//               >\n//                 <MenuIcon />\n//               </IconButton>\n//               <Typography\n//                 variant=\"h6\"\n//                 noWrap\n//                 component=\"div\"\n//                 sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n//               >\n//                 Image Inpainting WEB\n//               </Typography>\n//               <Search>\n//                 <SearchIconWrapper>\n//                   <SearchIcon />\n//                 </SearchIconWrapper>\n//                 <StyledInputBase\n//                   placeholder=\"Search\"\n//                   inputProps={{ 'aria-label': 'search' }}\n//                   name=\"searchKeyword\"\n//                   value={this.state.searchKeyword}\n//                   onChange={this.handleValueChange}\n//                 />\n//               </Search>\n//             </Toolbar>\n//           </AppBar>\n//         </Box><br />\n//         <DataAdd style={{ marginTop: 20, marginBottom: 20, display: 'flex', alignItems: \"center\", justifyContent: \"center\" }} stateRefresh={this.stateRefresh} />\n//         <br />\n\n//         <Paper sx={{ width: \"100%\" }}>\n//           <Table sx={{ minWidth: '1080px' }}>\n//             <TableHead>\n//               <TableRow>\n//                 {cellList.map(c => {\n//                   return <TableCell sx={{ fontSize: '1.0rem' }}>{c}</TableCell>\n//                 })}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {this.state.imageData ?\n//                 filteredComponents(this.state.imageData) :\n//                 <TableRow>\n//                   <TableCell colSpan=\"6\" align=\"center\">\n//                     <CircularProgress variant=\"determinate\" value={this.state.completed} />\n//                   </TableCell>\n//                 </TableRow>\n//               }\n//             </TableBody>\n//           </Table>\n//         </Paper>\n\n//       </div>\n\n//     );\n//   }\n// }\n\n// export default App;\nimport React, { Component } from 'react';\nimport Customer from './components/Customer';\nimport DataAdd from './components/DataAdd';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableBody from '@mui/material/TableBody';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button'; // Inpainting 버튼을 추가하기 위해 Button import 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.stateRefresh = () => {\n      this.setState({\n        imageData: '',\n        completed: 0,\n        searchKeyword: ''\n      });\n      this.callApi().then(res => this.setState({\n        imageData: res\n      })).catch(err => console.log(err));\n    };\n    this.callApi = async () => {\n      const response = await fetch('/api/main');\n      const body = await response.json();\n      return body;\n    };\n    this.progress = () => {\n      const {\n        completed\n      } = this.state;\n      this.setState({\n        completed: completed >= 100 ? 0 : completed + 10\n      });\n    };\n    this.handleValueChange = e => {\n      let nextState = {};\n      nextState[e.target.name] = e.target.value;\n      this.setState(nextState);\n    };\n    // Inpainting 버튼 클릭 시 실행되는 함수\n    this.handleInpainting = () => {\n      fetch('/api/runInpaintingScript') // Inpainting 스크립트를 실행하는 요청을 보냄\n      .then(response => {\n        if (response.ok) {\n          alert('Inpainting 작업이 성공적으로 실행되었습니다.');\n        } else {\n          throw new Error('Inpainting 작업 실행에 실패했습니다.');\n        }\n      }).catch(error => {\n        console.error('Inpainting 작업 실패:', error);\n      });\n    };\n    this.state = {\n      imageData: '',\n      completed: 0,\n      searchKeyword: ''\n    };\n  }\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 800);\n    this.callApi().then(res => this.setState({\n      imageData: res\n    })).catch(err => console.log(err));\n  }\n  render() {\n    const filteredComponents = data => {\n      data = data.filter(c => {\n        return c.name.indexOf(this.state.searchKeyword) > -1;\n      });\n      return data.map(c => {\n        return /*#__PURE__*/_jsxDEV(Customer, {\n          stateRefresh: this.stateRefresh,\n          id: c.id,\n          image: c.image,\n          inpainted: c.inpainted,\n          name: c.name,\n          explanation: c.explanation\n        }, c.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 16\n        }, this);\n      });\n    };\n    const cellList = [\"Number\", \"Original Image\", \"Inpainted Image\", \"Name\", \"Explanation\", \"Setting\"];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: 10,\n        marginRight: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleInpainting,\n        children: \"Inpainting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataAdd, {\n        style: {\n          marginTop: 20,\n          marginBottom: 20,\n          display: 'flex',\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        stateRefresh: this.stateRefresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          sx: {\n            minWidth: '1080px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: cellList.map(c => {\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  sx: {\n                    fontSize: '1.0rem'\n                  },\n                  children: c\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.state.imageData ? filteredComponents(this.state.imageData) : /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: \"6\",\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  variant: \"determinate\",\n                  value: this.state.completed\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Customer","DataAdd","TableRow","TableCell","Table","TableHead","TableBody","CircularProgress","Paper","Button","jsxDEV","_jsxDEV","App","constructor","props","stateRefresh","setState","imageData","completed","searchKeyword","callApi","then","res","catch","err","console","log","response","fetch","body","json","progress","state","handleValueChange","e","nextState","target","name","value","handleInpainting","ok","alert","Error","error","componentDidMount","timer","setInterval","render","filteredComponents","data","filter","c","indexOf","map","id","image","inpainted","explanation","fileName","_jsxFileName","lineNumber","columnNumber","cellList","style","marginLeft","marginRight","children","variant","color","onClick","marginTop","marginBottom","display","alignItems","justifyContent","sx","width","minWidth","fontSize","colSpan","align"],"sources":["/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/App.js"],"sourcesContent":["// import './App.css';\n// import Customer from './components/Customer';\n// import DataAdd from './components/DataAdd';\n\n// import TableRow from '@mui/material/TableRow';\n// import TableCell from '@mui/material/TableCell';\n// import Table from '@mui/material/Table';\n// import TableHead from '@mui/material/TableHead';\n// import TableBody from '@mui/material/TableBody';\n// import CircularProgress from '@mui/material/CircularProgress'; //로딩 중 일 때 동그란 원이 나타나느 라이브러리\n// import Paper from '@mui/material/Paper';\n// import React, { Component } from 'react';\n\n// //App Bar 구현 라이브러리들\n// import { styled, alpha } from '@mui/material/styles';\n// import AppBar from '@mui/material/AppBar';\n// import Box from '@mui/material/Box';\n// import Toolbar from '@mui/material/Toolbar';\n// import IconButton from '@mui/material/IconButton';\n// import Typography from '@mui/material/Typography';\n// import InputBase from '@mui/material/InputBase';\n// import MenuIcon from '@mui/icons-material/Menu';\n// import SearchIcon from '@mui/icons-material/Search';\n\n// const Search = styled('div')(({ theme }) => ({\n//   position: 'relative',\n//   borderRadius: theme.shape.borderRadius,\n//   backgroundColor: alpha(theme.palette.common.white, 0.15),\n//   '&:hover': {\n//     backgroundColor: alpha(theme.palette.common.white, 0.25),\n//   },\n//   marginLeft: 0,\n//   width: '100%',\n//   [theme.breakpoints.up('sm')]: {\n//     marginLeft: theme.spacing(1),\n//     width: 'auto',\n//   },\n// }));\n\n// const SearchIconWrapper = styled('div')(({ theme }) => ({\n//   padding: theme.spacing(0, 2),\n//   height: '100%',\n//   position: 'absolute',\n//   pointerEvents: 'none',\n//   display: 'flex',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n// }));\n\n// const StyledInputBase = styled(InputBase)(({ theme }) => ({\n//   color: 'inherit',\n//   width: '100%',\n//   '& .MuiInputBase-input': {\n//     padding: theme.spacing(1, 1, 1, 0),\n//     // vertical padding + font size from searchIcon\n//     paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n//     transition: theme.transitions.create('width'),\n//     [theme.breakpoints.up('sm')]: {\n//       width: '12ch',\n//       '&:focus': {\n//         width: '20ch',\n//       },\n//     },\n//   },\n// }));\n\n\n// class App extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       imageData: '',\n//       completed: 0,  //로딩될때 동그란 원이 로딩중임을 나타낼때 사용하기 위한 변수\n//       searchKeyword: ''\n//     } \n//   }\n\n//   stateRefresh = () => {\n//     this.setState({\n//       imageData: '',\n//       completed: 0,\n//       searchKeyword: ''\n//     });\n//     this.callApi()\n//       .then(res => this.setState({ imageData: res }))\n//       .catch(err => console.log(err));\n//   }\n\n//   componentDidMount() { //서버 api에서 data를 받아오는 함수\n//     this.timer = setInterval(this.progress, 800); //1000이 1초 -> 20은 0.02초\n//     this.callApi()\n//       .then(res => this.setState({ imageData: res }))\n//       .catch(err => console.log(err));\n//   }\n\n//   callApi = async () => {\n//     const response = await fetch('/api/main'); //주소에서 데이터 받아옴\n//     const body = await response.json(); //받아온 데이터를 json형태로 body에 저정함\n//     return body;\n//   }\n\n//   progress = () => { //로딩하는 원에 대한 함수\n//     const { completed } = this.state;\n//     this.setState({ completed: completed >= 100 ? 0 : completed + 10 });\n//   }\n\n//   handleValueChange = (e) => {\n//     let nextState = {};\n//     nextState[e.target.name] = e.target.value;\n//     this.setState(nextState);\n//   }\n\n//   render() {\n//     const filteredComponents = (data) => {\n//       data = data.filter((c) => {\n//         return c.name.indexOf(this.state.searchKeyword) > -1;\n//       });\n//       return data.map((c) => {\n//         return <Customer stateRefresh={this.stateRefresh} key = {c.id} id = {c.id} image={c.image} inpainted={c.inpainted} name={c.name} explanation={c.explanation} />\n//       });\n//     }\n//     const cellList = [\"Number\", \"Original Image\", \"Inpainted Image\", \"Name\", \"Explanation\", \"Setting\"];\n//     return (\n//       <div style={{ marginLeft: 10, marginRight: 10 }}>\n//         <Box sx={{ flexGrow: 1 }}>\n//           <AppBar position=\"static\" sx={{ minWidth: '1080px' }}>\n//             <Toolbar>\n//               <IconButton\n//                 size=\"large\"\n//                 edge=\"start\"\n//                 color=\"inherit\"\n//                 aria-label=\"open drawer\"\n//                 sx={{ mr: 2 }}\n//               >\n//                 <MenuIcon />\n//               </IconButton>\n//               <Typography\n//                 variant=\"h6\"\n//                 noWrap\n//                 component=\"div\"\n//                 sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n//               >\n//                 Image Inpainting WEB\n//               </Typography>\n//               <Search>\n//                 <SearchIconWrapper>\n//                   <SearchIcon />\n//                 </SearchIconWrapper>\n//                 <StyledInputBase\n//                   placeholder=\"Search\"\n//                   inputProps={{ 'aria-label': 'search' }}\n//                   name=\"searchKeyword\"\n//                   value={this.state.searchKeyword}\n//                   onChange={this.handleValueChange}\n//                 />\n//               </Search>\n//             </Toolbar>\n//           </AppBar>\n//         </Box><br />\n//         <DataAdd style={{ marginTop: 20, marginBottom: 20, display: 'flex', alignItems: \"center\", justifyContent: \"center\" }} stateRefresh={this.stateRefresh} />\n//         <br />\n\n//         <Paper sx={{ width: \"100%\" }}>\n//           <Table sx={{ minWidth: '1080px' }}>\n//             <TableHead>\n//               <TableRow>\n//                 {cellList.map(c => {\n//                   return <TableCell sx={{ fontSize: '1.0rem' }}>{c}</TableCell>\n//                 })}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {this.state.imageData ?\n//                 filteredComponents(this.state.imageData) :\n//                 <TableRow>\n//                   <TableCell colSpan=\"6\" align=\"center\">\n//                     <CircularProgress variant=\"determinate\" value={this.state.completed} />\n//                   </TableCell>\n//                 </TableRow>\n//               }\n//             </TableBody>\n//           </Table>\n//         </Paper>\n\n\n//       </div>\n\n//     );\n//   }\n// }\n\n// export default App;\nimport React, { Component } from 'react';\nimport Customer from './components/Customer';\nimport DataAdd from './components/DataAdd';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableBody from '@mui/material/TableBody';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button'; // Inpainting 버튼을 추가하기 위해 Button import 추가\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageData: '',\n      completed: 0,\n      searchKeyword: ''\n    }\n  }\n\n  stateRefresh = () => {\n    this.setState({\n      imageData: '',\n      completed: 0,\n      searchKeyword: ''\n    });\n    this.callApi()\n      .then(res => this.setState({ imageData: res }))\n      .catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 800);\n    this.callApi()\n      .then(res => this.setState({ imageData: res }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/main');\n    const body = await response.json();\n    return body;\n  }\n\n  progress = () => {\n    const { completed } = this.state;\n    this.setState({ completed: completed >= 100 ? 0 : completed + 10 });\n  }\n\n  handleValueChange = (e) => {\n    let nextState = {};\n    nextState[e.target.name] = e.target.value;\n    this.setState(nextState);\n  }\n\n  // Inpainting 버튼 클릭 시 실행되는 함수\n  handleInpainting = () => {\n    fetch('/api/runInpaintingScript') // Inpainting 스크립트를 실행하는 요청을 보냄\n      .then(response => {\n        if (response.ok) {\n          alert('Inpainting 작업이 성공적으로 실행되었습니다.');\n        } else {\n          throw new Error('Inpainting 작업 실행에 실패했습니다.');\n        }\n      })\n      .catch(error => {\n        console.error('Inpainting 작업 실패:', error);\n      });\n  }\n\n  render() {\n    const filteredComponents = (data) => {\n      data = data.filter((c) => {\n        return c.name.indexOf(this.state.searchKeyword) > -1;\n      });\n      return data.map((c) => {\n        return <Customer stateRefresh={this.stateRefresh} key={c.id} id={c.id} image={c.image} inpainted={c.inpainted} name={c.name} explanation={c.explanation} />\n      });\n    }\n    const cellList = [\"Number\", \"Original Image\", \"Inpainted Image\", \"Name\", \"Explanation\", \"Setting\"];\n    return (\n      <div style={{ marginLeft: 10, marginRight: 10 }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleInpainting}>Inpainting</Button> {/* Inpainting 버튼 추가 */}\n        <br />\n        <br />\n        <DataAdd style={{ marginTop: 20, marginBottom: 20, display: 'flex', alignItems: \"center\", justifyContent: \"center\" }} stateRefresh={this.stateRefresh} />\n        <br />\n\n        <Paper sx={{ width: \"100%\" }}>\n          <Table sx={{ minWidth: '1080px' }}>\n            <TableHead>\n              <TableRow>\n                {cellList.map(c => {\n                  return <TableCell sx={{ fontSize: '1.0rem' }}>{c}</TableCell>\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.imageData ?\n                filteredComponents(this.state.imageData) :\n                <TableRow>\n                  <TableCell colSpan=\"6\" align=\"center\">\n                    <CircularProgress variant=\"determinate\" value={this.state.completed} />\n                  </TableCell>\n                </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}