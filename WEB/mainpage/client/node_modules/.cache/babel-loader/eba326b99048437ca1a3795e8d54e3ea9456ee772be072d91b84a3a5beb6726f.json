{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  backgroundImage,\n  imageWidth,\n  imageHeight,\n  id,\n  updateMaskImage\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [prevX, setPrevX] = useState(0);\n  const [prevY, setPrevY] = useState(0);\n  const startDrawing = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    setIsDrawing(true);\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 20;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n  };\n  const draw = e => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isDrawing) return;\n    const ctx = canvas.getContext('2d');\n    ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctx.stroke();\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // 배경 이미지 다시 그리기\n    const image = new Image();\n    image.src = backgroundImage;\n    image.onload = () => {\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    };\n  };\n  const saveMaskImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    const maskImage = canvas.toDataURL('image/png');\n    updateMaskImage(maskImage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: imageWidth,\n      height: imageHeight,\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseOut: stopDrawing,\n      style: {\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'contain'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveMaskImage,\n        children: \"Save Mask Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xJ4tOQjK4xSzd8uOhnkBASgd8hs=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Canvas","backgroundImage","imageWidth","imageHeight","id","updateMaskImage","_s","canvasRef","isDrawing","setIsDrawing","prevX","setPrevX","prevY","setPrevY","startDrawing","e","canvas","current","ctx","getContext","nativeEvent","offsetX","offsetY","strokeStyle","lineWidth","lineJoin","lineCap","beginPath","moveTo","draw","lineTo","stroke","stopDrawing","clearCanvas","clearRect","width","height","image","Image","src","onload","drawImage","saveMaskImage","console","error","maskImage","toDataURL","style","position","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseOut","backgroundSize","fileName","_jsxFileName","lineNumber","columnNumber","top","left","onClick","_c","$RefreshReg$"],"sources":["/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js"],"sourcesContent":["// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { useRef, useState } from 'react';\n\nconst Canvas = ({ backgroundImage, imageWidth, imageHeight, id, updateMaskImage }) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [prevX, setPrevX] = useState(0);\n  const [prevY, setPrevY] = useState(0);\n\n  const startDrawing = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    setIsDrawing(true);\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 20;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n  };\n\n  const draw = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isDrawing) return;\n    const ctx = canvas.getContext('2d');\n    ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctx.stroke();\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // 배경 이미지 다시 그리기\n    const image = new Image();\n    image.src = backgroundImage;\n    image.onload = () => {\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    };\n  };\n\n  const saveMaskImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    const maskImage = canvas.toDataURL('image/png');\n    updateMaskImage(maskImage);\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <canvas\n        ref={canvasRef}\n        width={imageWidth}\n        height={imageHeight}\n        onMouseDown={startDrawing}\n        onMouseMove={draw}\n        onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n        style={{ backgroundImage: `url(${backgroundImage})`, backgroundSize: 'contain' }}\n      />\n      <div style={{ position: 'absolute', top: 0, left: 0 }}>\n        <button onClick={clearCanvas}>Clear</button>\n        <button onClick={saveMaskImage}>Save Mask Image</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}