{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  backgroundImage,\n  imageWidth,\n  imageHeight,\n  id,\n  updateMaskImage\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [prevX, setPrevX] = useState(0);\n  const [prevY, setPrevY] = useState(0);\n  const startDrawing = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    setIsDrawing(true);\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 20;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n  };\n  const draw = e => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isDrawing) return;\n    const ctx = canvas.getContext('2d');\n    const x = e.nativeEvent.offsetX;\n    const y = e.nativeEvent.offsetY;\n    ctx.beginPath();\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    setPrevX(x);\n    setPrevY(y);\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const saveMaskImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    const maskImage = canvas.toDataURL('image/png');\n    updateMaskImage(maskImage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: imageWidth,\n    height: imageHeight,\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing,\n    style: {\n      backgroundImage: `url(${backgroundImage})`,\n      backgroundSize: 'contain'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xJ4tOQjK4xSzd8uOhnkBASgd8hs=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Canvas","backgroundImage","imageWidth","imageHeight","id","updateMaskImage","_s","canvasRef","isDrawing","setIsDrawing","prevX","setPrevX","prevY","setPrevY","startDrawing","e","canvas","current","ctx","getContext","nativeEvent","offsetX","offsetY","strokeStyle","lineWidth","lineJoin","lineCap","draw","x","y","beginPath","moveTo","lineTo","stroke","stopDrawing","clearCanvas","clearRect","width","height","saveMaskImage","console","error","maskImage","toDataURL","ref","onMouseDown","onMouseMove","onMouseUp","onMouseOut","style","backgroundSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeong-yeongjin/HUFS-BME-AI-WEB/WEB/mainpage/client/src/components/Canvas.js"],"sourcesContent":["// import React, { Component } from 'react';\n\n// class Canvas extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       penWidth: 5,\n//       isDrawing: false,\n//       lastX: 0,\n//       lastY: 0,\n//     };\n//     this.canvasRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.initializeCanvas();\n//   }\n\n//   initializeCanvas = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = this.props.imageWidth;\n//     canvas.height = this.props.imageHeight;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = this.props.backgroundImage;\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n//     };\n\n//     canvas.addEventListener('mousedown', this.handleMouseDown);\n//     canvas.addEventListener('mousemove', this.handleMouseMove);\n//     canvas.addEventListener('mouseup', this.handleMouseUp);\n//     canvas.addEventListener('mouseout', this.handleMouseOut);\n//   };\n\n//   handleMouseDown = (e) => {\n//     this.startDrawing(e);\n//   };\n\n//   handleMouseMove = (e) => {\n//     this.draw(e);\n//   };\n\n//   handleMouseUp = () => {\n//     this.stopDrawing();\n//   };\n\n//   handleMouseOut = () => {\n//     this.stopDrawing();\n//   };\n\n//   startDrawing = (e) => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const { penWidth } = this.state;\n\n//     ctx.lineWidth = penWidth;\n//     ctx.lineCap = 'round';\n//     ctx.strokeStyle = 'rgba(0, 128, 0, 0.5)'; // 반투명한 초록색\n//     ctx.globalAlpha = 0.7; // 투명도 설정\n//     ctx.beginPath();\n\n//     this.setState({\n//       isDrawing: true,\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   draw = (e) => {\n//     const { isDrawing, lastX, lastY } = this.state;\n//     if (!isDrawing) return;\n\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     ctx.lineTo(e.offsetX, e.offsetY);\n//     ctx.stroke();\n\n//     this.setState({\n//       lastX: e.offsetX,\n//       lastY: e.offsetY,\n//     });\n\n//     // 새로운 선을 시작\n//     ctx.beginPath();\n//     ctx.moveTo(e.offsetX, e.offsetY);\n//   };\n\n//   stopDrawing = () => {\n//     this.setState({ isDrawing: false });\n//   };\n\n//   clearDrawing = () => {\n//     const canvas = this.canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     this.initializeCanvas();\n//   };\n\n//   setPenWidth = (width) => {\n//     this.setState({ penWidth: width });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <canvas\n//           ref={this.canvasRef}\n//           style={{ border: '1px solid #000' }}\n//         ></canvas>\n//         <div style={{ marginTop: '10px' }}>\n//           <button onClick={this.clearDrawing}>Clear Drawing</button>\n//           <input\n//             type=\"number\"\n//             min=\"1\"\n//             max=\"100\"\n//             value={this.state.penWidth}\n//             onChange={(e) => this.setPenWidth(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Canvas;\n\nimport React, { useRef, useState } from 'react';\n\nconst Canvas = ({ backgroundImage, imageWidth, imageHeight, id, updateMaskImage }) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [prevX, setPrevX] = useState(0);\n  const [prevY, setPrevY] = useState(0);\n\n  const startDrawing = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    setIsDrawing(true);\n    setPrevX(e.nativeEvent.offsetX);\n    setPrevY(e.nativeEvent.offsetY);\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 20;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n  };\n\n  const draw = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isDrawing) return;\n    const ctx = canvas.getContext('2d');\n    const x = e.nativeEvent.offsetX;\n    const y = e.nativeEvent.offsetY;\n    ctx.beginPath();\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    setPrevX(x);\n    setPrevY(y);\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const saveMaskImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    const maskImage = canvas.toDataURL('image/png');\n    updateMaskImage(maskImage);\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={imageWidth}\n      height={imageHeight}\n      onMouseDown={startDrawing}\n      onMouseMove={draw}\n      onMouseUp={stopDrawing}\n      onMouseOut={stopDrawing}\n      style={{ backgroundImage: `url(${backgroundImage})`, backgroundSize: 'contain' }}\n    />\n  );\n};\n\nexport default Canvas;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,MAAM,GAAGA,CAAC;EAAEC,eAAe;EAAEC,UAAU;EAAEC,WAAW;EAAEC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACpF,MAAMC,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMiB,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IACb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCV,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAACI,CAAC,CAACK,WAAW,CAACC,OAAO,CAAC;IAC/BR,QAAQ,CAACE,CAAC,CAACK,WAAW,CAACE,OAAO,CAAC;IAC/BJ,GAAG,CAACK,WAAW,GAAG,OAAO;IACzBL,GAAG,CAACM,SAAS,GAAG,EAAE;IAClBN,GAAG,CAACO,QAAQ,GAAG,OAAO;IACtBP,GAAG,CAACQ,OAAO,GAAG,OAAO;EACvB,CAAC;EAED,MAAMC,IAAI,GAAIZ,CAAC,IAAK;IAClB,MAAMC,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,IAAI,CAACD,MAAM,IAAI,CAACR,SAAS,EAAE;IAC3B,MAAMU,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMS,CAAC,GAAGb,CAAC,CAACK,WAAW,CAACC,OAAO;IAC/B,MAAMQ,CAAC,GAAGd,CAAC,CAACK,WAAW,CAACE,OAAO;IAC/BJ,GAAG,CAACY,SAAS,CAAC,CAAC;IACfZ,GAAG,CAACa,MAAM,CAACrB,KAAK,EAAEE,KAAK,CAAC;IACxBM,GAAG,CAACc,MAAM,CAACJ,CAAC,EAAEC,CAAC,CAAC;IAChBX,GAAG,CAACe,MAAM,CAAC,CAAC;IACZtB,QAAQ,CAACiB,CAAC,CAAC;IACXf,QAAQ,CAACgB,CAAC,CAAC;EACb,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBzB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAM0B,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMnB,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IACb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACkB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEpB,MAAM,CAACqB,KAAK,EAAErB,MAAM,CAACsB,MAAM,CAAC;EAClD,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMvB,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;MACXwB,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACzC;IACF;IACA,MAAMC,SAAS,GAAG1B,MAAM,CAAC2B,SAAS,CAAC,WAAW,CAAC;IAC/CtC,eAAe,CAACqC,SAAS,CAAC;EAC5B,CAAC;EAED,oBACE3C,OAAA;IACE6C,GAAG,EAAErC,SAAU;IACf8B,KAAK,EAAEnC,UAAW;IAClBoC,MAAM,EAAEnC,WAAY;IACpB0C,WAAW,EAAE/B,YAAa;IAC1BgC,WAAW,EAAEnB,IAAK;IAClBoB,SAAS,EAAEb,WAAY;IACvBc,UAAU,EAAEd,WAAY;IACxBe,KAAK,EAAE;MAAEhD,eAAe,EAAG,OAAMA,eAAgB,GAAE;MAAEiD,cAAc,EAAE;IAAU;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClF,CAAC;AAEN,CAAC;AAAChD,EAAA,CAlEIN,MAAM;AAAAuD,EAAA,GAANvD,MAAM;AAoEZ,eAAeA,MAAM;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}